def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}


def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 29

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "online.jawhara"
        minSdkVersion 20
        targetSdkVersion 29
        multiDexEnabled true
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        ndk {
            abiFilters "arm64-v8a", "armeabi-v7a"
        }
        resConfigs "en", "ar"
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
//    implementation files('../../Android_OPPWAMobile_2.46.0/oppwa.mobile-2.46.0.aar')
//    implementation files('F:\\\\Abdallah\\Hyperpay SDK v2.46\\oppwa.mobile-2.46.0.aar')
    implementation 'com.android.support:support-v4:29.0.0'
//    implementation 'com.google.firebase:firebase-messaging:21.1.0'
    implementation 'com.android.support:appcompat-v7:29.0.0'
    implementation 'com.android.support:design:29.0.0'
    implementation 'com.android.support:customtabs:29.0.0'
    implementation("com.squareup.okhttp3:okhttp:4.7.2")
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.android.support:multidex:1.0.3'
    implementation "com.huawei.hms:hwid:4.0.0.300"
    implementation "com.google.android.gms:play-services-base:17.6.0"
    implementation 'com.huawei.agconnect:agconnect-core:1.5.1.300'
}
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.huawei.agconnect'
